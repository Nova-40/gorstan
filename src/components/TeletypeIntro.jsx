// Gorstan Game Module â€” v2.8.3
// MIT License Â© 2025 Geoff Webster
// TeletypeIntro.jsx â€” Animated teletype intro sequence for Gorstan gameplay UI.

import React, { useState, useEffect } from "react";
import CRTFrame from "./CRTFrame";
import PropTypes from "prop-types";

/**
 * TeletypeIntro
 * Animates the intro narrative, then presents the player with three urgent choices.
 * @component
 * @param {Object} props
 * @param {function} props.onJump - Callback for "Jump" choice.
 * @param {function} props.onWait - Callback for "Wait" choice.
 * @param {function} props.onSip - Callback for "Sip Coffee" choice.
 * @param {boolean} [props.skipIntro=false] - If true, skips the intro animation.
 * @returns {JSX.Element|null}
 */
const TeletypeIntro = ({ onJump, onWait, onSip, skipIntro = false }) => {
  // Defensive: fallback for missing callbacks
  const isValidCallback = (cb) => typeof cb === "function";

  // Defensive: get player name from localStorage, fallback to "traveller"
  let playerName = "traveller";
  try {
    playerName = localStorage.getItem("playerName") || "traveller";
  } catch {
    // Ignore localStorage errors
  }

  // The lines of the intro narrative
  const introText = [
    `Good day, ${playerName}.`,
    "Youâ€™re heading home, coffee in hand â€” a comforting ritual.",
    "The air hums faintly, like static waiting to snap.",
    "Something feels... familiar. Like this has happened before.",
    "The lights flicker â€” just once. You tell yourself itâ€™s nothing.",
    "You glance at your reflection in the cafÃ© window â€” but it lingers after you move.",
    "A voice? No, just caffeine and imagination.",
    "You cross the road. The signal blinks green.",
    "And then â€”",
    "BIG YELLOW TRUCK comes out of nowhere, hurtling toward you at a rate of knots..."
  ];

  // State for which line is currently visible
  const [currentLine, setCurrentLine] = useState(0);
  // State for when all lines are shown and ready for choices
  const [ready, setReady] = useState(false);
  // State for when to show the choice buttons
  const [showButtons, setShowButtons] = useState(false);
  // State to prevent multiple "sip" actions
  const [sipUsed, setSipUsed] = useState(false);

  // Animate the intro lines unless skipping
  useEffect(() => {
    if (skipIntro) {
      setShowButtons(true);
      setReady(true);
      return;
    }

    if (currentLine < introText.length) {
      const timeout = setTimeout(() => {
        setCurrentLine((prev) => prev + 1);
      }, 1200);
      return () => clearTimeout(timeout);
    } else {
      setReady(true);
      const btnTimeout = setTimeout(() => setShowButtons(true), 1000);
      return () => clearTimeout(btnTimeout);
    }
  }, [currentLine, skipIntro, introText.length]);

  /**
   * Handles the "Sip Coffee" button click.
   * Prevents multiple triggers.
   */
  const handleSip = () => {
    if (!sipUsed && isValidCallback(onSip)) {
      setSipUsed(true);
      try {
        onSip();
      } catch (err) {
        // eslint-disable-next-line no-console
        console.error("TeletypeIntro onSip callback failed:", err);
      }
    }
  };

  // Defensive: If any required callback is missing, show error UI
  if (!isValidCallback(onJump) || !isValidCallback(onWait) || !isValidCallback(onSip)) {
    // eslint-disable-next-line no-console
    console.error("TeletypeIntro: All choice callbacks are required and must be functions.");
    return (
      <CRTFrame>
        <div className="min-h-screen flex items-center justify-center bg-black text-red-400 font-mono px-4">
          <div className="border border-red-500 rounded-2xl p-6 w-full max-w-xl text-center shadow-lg bg-black/90">
            <h2 className="text-xl mb-4">Error: Game cannot continue</h2>
            <p className="mb-6">A critical error occurred. Please reload or contact support.</p>
          </div>
        </div>
      </CRTFrame>
    );
  }

  return (
    <CRTFrame>
      <main className="min-h-screen bg-black text-green-400 font-mono flex flex-col items-center justify-center p-4 text-center">
        <div className="max-w-screen-sm">
          {skipIntro ? (
            <p className="mb-4">[Intro skipped]</p>
          ) : (
            introText.slice(0, currentLine).map((line, i) => (
              <p key={i} className="mb-2 animate-pulse">{line}</p>
            ))
          )}

          {showButtons && (
            <div className="mt-6 flex flex-col gap-3 items-center">
              <button
                onClick={onJump}
                className="bg-green-700 hover:bg-green-600 text-white px-6 py-2 rounded-2xl transition-shadow duration-200 shadow-lg hover:shadow-green-500"
                aria-label="Jump"
                type="button"
              >
                Jump
              </button>
              <button
                onClick={onWait}
                className="bg-green-700 hover:bg-green-600 text-white px-6 py-2 rounded-2xl transition-shadow duration-200 shadow-lg hover:shadow-green-500"
                aria-label="Wait"
                type="button"
              >
                Wait
              </button>
              <button
                onClick={handleSip}
                disabled={sipUsed}
                className={`${
                  sipUsed ? "opacity-50 cursor-not-allowed" : "hover:shadow-green-500"
                } bg-green-700 hover:bg-green-600 text-white px-6 py-2 rounded-2xl transition-shadow duration-200 shadow-lg`}
                aria-label="Sip Coffee"
                type="button"
              >
                Sip Coffee
              </button>
            </div>
          )}
        </div>
      </main>
    </CRTFrame>
  );
};

TeletypeIntro.propTypes = {
  /** Callback for "Jump" choice */
  onJump: PropTypes.func.isRequired,
  /** Callback for "Wait" choice */
  onWait: PropTypes.func.isRequired,
  /** Callback for "Sip Coffee" choice */
  onSip: PropTypes.func.isRequired,
  /** If true, skips the intro animation */
  skipIntro: PropTypes.bool
};

export default TeletypeIntro;

/*
Review summary:
- âœ… Syntax is correct and all logic is preserved.
- âœ… JSDoc comments for component, props, handlers, and state.
- âœ… Defensive error handling for missing/invalid callbacks and localStorage.
- âœ… Accessible (aria-labels, disabled state, readable contrast).
- âœ… Tailwind classes for consistent UI.
- âœ… No dead code or unused props.
- âœ… Structure is modular and ready for integration.
- ðŸ§ª TODO: Consider extracting introText to a config or localization file for future extensibility.
*/
