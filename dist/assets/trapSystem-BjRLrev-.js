let l={},u={},o={};const p=(e,t=!1)=>{const s=Object.keys(e),n=t?0:Math.floor(s.length/6),a=[];for(;a.length<n;){const r=s[Math.floor(Math.random()*s.length)];a.includes(r)||a.push(r)}l=a.reduce((r,i)=>(r[i]=!0,r),{}),u={},o={}},c=(e,t,s)=>{var n,a;if(!u[e]&&l[e]){const r=(n=t.flags)==null?void 0:n.debug;(((a=t.traits)==null?void 0:a.includes("curious"))||r)&&s({type:"LOG",payload:"[Trap Warning] Something feels off here..."}),o[e]||(o[e]=setTimeout(()=>{t.room===e&&(r?s({type:"LOG",payload:"[DEBUG] You triggered a trap... but it fizzles harmlessly."}):(s({type:"LOG",payload:"ðŸ’¥ A hidden trap springs! You're overwhelmed and lose consciousness."}),s({type:"MOVE",payload:{room:"centralpark"}})),delete o[e])},3e3))}},f=(e,t)=>{l[e]?(u[e]=!0,delete l[e],t({type:"LOG",payload:`ðŸ§° You carefully defuse the trap in ${e}.`})):t({type:"LOG",payload:"There's nothing to defuse here."})},d=()=>({active:Object.keys(l),disarmed:Object.keys(u)});export{c as checkForTrap,f as defuseTrap,d as getTrapStatus,p as seedTraps};
